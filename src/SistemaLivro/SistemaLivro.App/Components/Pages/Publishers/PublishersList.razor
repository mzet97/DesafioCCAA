@page "/publishers"
@using MediatR
@using Microsoft.AspNetCore.Authorization
@using MudBlazor
@using SistemaLivro.Application.UseCases.Publishers.Queries
@using SistemaLivro.Application.UseCases.Publishers.Commands
@using SistemaLivro.Application.UseCases.Publishers.ViewModels
@using SistemaLivro.App.Components.Shared
@using System.ComponentModel.DataAnnotations
@inject IMediator Mediator
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager Navigation

@attribute [Authorize]

<PageTitle>Editoras</PageTitle>

<AuthorizeView> 
    <Authorized>
        <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
            <div class="d-flex align-center justify-space-between mb-4">
                <div class="d-flex align-center">
                    <MudIcon Icon="Icons.Material.Filled.Business" Class="mr-3" Style="font-size: 2rem;" />
                    <MudText Typo="Typo.h4">Gerenciamento de Editoras</MudText>
                </div>
                <MudButton Variant="Variant.Filled" 
                           Color="Color.Primary" 
                           StartIcon="Icons.Material.Filled.Add"
                           OnClick="@(() => Navigation.NavigateTo("/publishers/new"))">
                    Nova Editora
                </MudButton>
            </div>
    
            <MudCard>
                <MudCardContent>
                    <MudDataGrid @ref="_dataGrid"
                                 T="PublisherViewModel"
                                 ServerData="LoadGridData"
                                 Loading="@_loading"
                                 Hover="true"
                                 Striped="true"
                                 Dense="true"
                                 MultiSelection="true"
                                 SelectOnRowClick="false"
                                 SelectedItems="_selectedItems"
                                 SelectedItemsChanged="OnSelectedItemsChanged"
                                 Filterable="true"
                                 FilterMode="DataGridFilterMode.Simple"
                                 SortMode="SortMode.Multiple"
                                 Pageable="true"
                                 RowsPerPage="25"
                                 RowsPerPageOptions="new int[] { 10, 25, 50, 100 }"
                                 ShowMenuIcon="true"
                                 ShowFilterIcons="true">
                        
                        <ToolBarContent>
                            <MudText Typo="Typo.h6">Editoras</MudText>
                            <MudSpacer />
                            
                            <!-- Campo de pesquisa global -->
                            <MudTextField @bind-Value="_globalSearchString"
                                          @onkeyup="OnGlobalSearch"
                                          Placeholder="Pesquisar..."
                                          Adornment="Adornment.Start"
                                          AdornmentIcon="Icons.Material.Filled.Search"
                                          IconSize="Size.Medium"
                                          Clearable="true"
                                          DebounceInterval="500"
                                          Class="mt-0" />
                        </ToolBarContent>
                        
                        <Columns>
                            <SelectColumn T="PublisherViewModel" />
                            
                            <PropertyColumn Property="x => x.Name" 
                                            Title="Nome"
                                            Filterable="true"
                                            Sortable="true">
                                <FilterTemplate Context="filterContext">
                                    <MudTextField @bind-Value="filterContext.FilterDefinition.Value"
                                                  Placeholder="Filtrar por nome..."
                                                  Variant="Variant.Outlined"
                                                  Margin="Margin.Dense"
                                                  Clearable="true" />
                                </FilterTemplate>
                            </PropertyColumn>
                            
                            <PropertyColumn Property="x => x.Description" 
                                            Title="Descrição"
                                            Filterable="true"
                                            Sortable="true">
                                <FilterTemplate Context="filterContext">
                                    <MudTextField @bind-Value="filterContext.FilterDefinition.Value"
                                                  Placeholder="Filtrar por descrição..."
                                                  Variant="Variant.Outlined"
                                                  Margin="Margin.Dense"
                                                  Clearable="true" />
                                </FilterTemplate>
                            </PropertyColumn>
                            
                            <PropertyColumn Property="x => x.CreatedAt" 
                                            Title="Criado em"
                                            Format="dd/MM/yyyy HH:mm"
                                            Filterable="false"
                                            Sortable="true" />
                            
                            <TemplateColumn Title="Ações" 
                                            Sortable="false" 
                                            Filterable="false"
                                            CellClass="d-flex justify-end">
                                <CellTemplate Context="cellContext">
                                    <MudButtonGroup Variant="Variant.Text" Size="Size.Small">
                                        <MudIconButton Icon="Icons.Material.Filled.Edit" 
                                                       Color="Color.Primary" 
                                                       Size="Size.Small"
                                                       Title="Editar"
                                                       OnClick="@(() => Navigation.NavigateTo($"/publishers/edit/{cellContext.Item.Id}"))" />
                                        <MudIconButton Icon="Icons.Material.Filled.Delete" 
                                                       Color="Color.Error" 
                                                       Size="Size.Small"
                                                       Title="Excluir"
                                                       OnClick="@(() => DeleteSinglePublisher(cellContext.Item))" />
                                    </MudButtonGroup>
                                </CellTemplate>
                            </TemplateColumn>
                        </Columns>
                        
                        <PagerContent>
                            <MudDataGridPager T="PublisherViewModel" 
                                              InfoFormat="{first_item}-{last_item} de {all_items}" />
                        </PagerContent>
                        
                        <NoRecordsContent>
                            <div class="d-flex flex-column align-center justify-center pa-4">
                                <MudIcon Icon="Icons.Material.Filled.SearchOff" Size="Size.Large" Color="Color.Default" />
                                <MudText Typo="Typo.subtitle1" Class="mt-2">Nenhuma editora encontrada</MudText>
                                <MudText Typo="Typo.body2" Color="Color.Secondary">
                                    @if (!string.IsNullOrEmpty(_globalSearchString))
                                    {
                                        <span>Tente ajustar os filtros de pesquisa</span>
                                    }
                                    else
                                    {
                                        <span>Comece criando uma nova editora</span>
                                    }
                                </MudText>
                            </div>
                        </NoRecordsContent>
                        
                        <LoadingContent>
                            <div class="d-flex justify-center align-center pa-4">
                                <MudProgressCircular Indeterminate="true" />
                                <MudText Class="ml-3">Carregando editoras...</MudText>
                            </div>
                        </LoadingContent>
                    </MudDataGrid>
                </MudCardContent>
            </MudCard>
            
            <!-- Ações em lote -->
            @if (_selectedItems.Any())
            {
                <MudPaper Class="pa-4 mt-3" Elevation="2">
                    <div class="d-flex align-center justify-space-between">
                        <div class="d-flex align-center">
                            <MudIcon Icon="Icons.Material.Filled.CheckCircle" Color="Color.Info" Class="mr-2" />
                            <MudText Typo="Typo.subtitle1">
                                @_selectedItems.Count editora@(_selectedItems.Count == 1 ? "" : "s") selecionada@(_selectedItems.Count == 1 ? "" : "s")
                            </MudText>
                        </div>
                        <div>
                            <MudButton Variant="Variant.Text" 
                                       StartIcon="Icons.Material.Filled.Clear"
                                       OnClick="ClearSelection">
                                Limpar Seleção
                            </MudButton>
                            <MudButton Variant="Variant.Filled" 
                                       Color="Color.Error" 
                                       StartIcon="Icons.Material.Filled.DeleteSweep"
                                       OnClick="DeleteMultiplePublishers"
                                       Class="ml-2">
                                Excluir Selecionadas
                            </MudButton>
                        </div>
                    </div>
                </MudPaper>
            }
        </MudContainer>
    </Authorized>
    <NotAuthorized>
        <MudText Typo="Typo.h3" GutterBottom="true">Você não tem permissão para acessar esta página.</MudText>
    </NotAuthorized>
</AuthorizeView>

@code {
    private MudDataGrid<PublisherViewModel>? _dataGrid;
    private bool _loading = false;
    private string _globalSearchString = string.Empty;
    private HashSet<PublisherViewModel> _selectedItems = new();

    private async Task<GridData<PublisherViewModel>> LoadGridData(GridState<PublisherViewModel> state)
    {
        _loading = true;
        try
        {
            // Constrói a query do Gridify
            var gridifyQuery = new GetPublishersGridQuery
            {
                Page = state.Page + 1, // MudBlazor usa base 0, Gridify usa base 1
                PageSize = state.PageSize,
                OrderBy = string.Join(",", state.SortDefinitions.Select(s => $"{s.SortBy} {(s.Descending ? "desc" : "asc")}")),
                Filter = BuildFilter(state)
            };

            var result = await Mediator.Send(gridifyQuery);

            return new GridData<PublisherViewModel>
            {
                Items = result.Data,
                TotalItems = result.PagedResult?.RowCount ?? 0
            };
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao carregar editoras: {ex.Message}", Severity.Error);
            return new GridData<PublisherViewModel> { Items = new List<PublisherViewModel>(), TotalItems = 0 };
        }
        finally
        {
            _loading = false;
        }
    }

    private string BuildFilter(GridState<PublisherViewModel> state)
    {
        var filters = new List<string>();

        // Filtro global
        if (!string.IsNullOrWhiteSpace(_globalSearchString))
        {
            filters.Add($"(name@=*{_globalSearchString}*||description@=*{_globalSearchString}*)");
        }

        // Filtros por coluna
        foreach (var filter in state.FilterDefinitions.Where(f => !string.IsNullOrWhiteSpace(f.Value?.ToString())))
        {
            var columnName = filter.Column?.PropertyName?.ToLowerInvariant();
            var value = filter.Value?.ToString();
            
            if (!string.IsNullOrWhiteSpace(columnName) && !string.IsNullOrWhiteSpace(value))
            {
                filters.Add($"{columnName}@=*{value}*");
            }
        }

        return string.Join("&", filters);
    }

    private async Task OnGlobalSearch(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" || e.Key == "Escape")
        {
            await RefreshGrid();
        }
    }

    private async Task RefreshGrid()
    {
        if (_dataGrid != null)
        {
            await _dataGrid.ReloadServerData();
        }
    }

    private void OnSelectedItemsChanged(HashSet<PublisherViewModel> selectedItems)
    {
        _selectedItems = selectedItems;
        StateHasChanged();
    }

    private void ClearSelection()
    {
        _selectedItems.Clear();
        StateHasChanged();
    }

    private async Task DeleteSinglePublisher(PublisherViewModel publisher)
    {
        var parameters = new DialogParameters
        {
            ["ContentText"] = $"Tem certeza que deseja excluir a editora '{publisher.Name}'? Esta ação não pode ser desfeita.",
            ["ButtonText"] = "Excluir",
            ["Color"] = Color.Error
        };

        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Confirmar Exclusão", parameters);
        var result = await dialog.Result;

        if (result != null && !result.Canceled)
        {
            try
            {
                var command = new DeleteMultiplePublishersCommand(new[] { publisher.Id });
                var deleteResult = await Mediator.Send(command);

                if (deleteResult.Success)
                {
                    Snackbar.Add("Editora excluída com sucesso!", Severity.Success);
                    await RefreshGrid();
                }
                else
                {
                    Snackbar.Add(deleteResult.Message, Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Erro ao excluir editora: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task DeleteMultiplePublishers()
    {
        if (!_selectedItems.Any()) return;

        var parameters = new DialogParameters<DeleteMultiplePublishersDialog>
        {
            [nameof(DeleteMultiplePublishersDialog.SelectedPublishers)] = _selectedItems.ToList()
        };

        var dialog = await DialogService.ShowAsync<DeleteMultiplePublishersDialog>("Confirmar Exclusão Múltipla", parameters);
        var result = await dialog.Result;

        if (result != null && !result.Canceled)
        {
            try
            {
                var command = new DeleteMultiplePublishersCommand(_selectedItems.Select(p => p.Id));
                var deleteResult = await Mediator.Send(command);

                if (deleteResult.Success)
                {
                    Snackbar.Add(deleteResult.Message, Severity.Success);
                    ClearSelection();
                    await RefreshGrid();
                }
                else
                {
                    Snackbar.Add(deleteResult.Message, Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Erro ao excluir editoras: {ex.Message}", Severity.Error);
            }
        }
    }
}