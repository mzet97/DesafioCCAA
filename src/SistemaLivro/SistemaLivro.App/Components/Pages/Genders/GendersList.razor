@page "/genders"
@using MediatR
@using Microsoft.AspNetCore.Authorization
@using MudBlazor
@using SistemaLivro.Application.UseCases.Genders.Queries
@using SistemaLivro.Application.UseCases.Genders.ViewModels
@using SistemaLivro.Shared.ViewModels
@inject IMediator Mediator
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager Navigation

@attribute [Authorize]

<PageTitle>Gêneros</PageTitle>

<AuthorizeView> 
    <Authorized>
        
        <MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
            <MudText Typo="Typo.h4" Class="mb-4">Gerenciamento de Gêneros</MudText>
    
            <MudCard>
                <MudCardContent>
                    <!-- Filtros -->
                    <MudGrid Class="mb-4">
                        <MudItem xs="12" sm="6" md="4">
                            <MudTextField @bind-Value="searchQuery.Name" 
                                          Label="Nome" 
                                          Variant="Variant.Outlined" 
                                          Adornment="Adornment.Start" 
                                          AdornmentIcon="Icons.Material.Filled.Search" />
                        </MudItem>
                        <MudItem xs="12" sm="6" md="2">
                            <MudButton Variant="Variant.Filled" 
                                       Color="Color.Primary" 
                                       StartIcon="Icons.Material.Filled.Search"
                                       OnClick="SearchGenders">
                                Buscar
                            </MudButton>
                        </MudItem>
                        <MudItem xs="12" sm="6" md="2">
                            <MudButton Variant="Variant.Outlined" 
                                       Color="Color.Secondary" 
                                       StartIcon="Icons.Material.Filled.Clear"
                                       OnClick="ClearFilters">
                                Limpar
                            </MudButton>
                        </MudItem>
                        <MudItem xs="12" sm="6" md="2">
                            <MudButton Variant="Variant.Filled" 
                                       Color="Color.Success" 
                                       StartIcon="Icons.Material.Filled.Add"
                                       OnClick="CreateGender">
                                Novo Gênero
                            </MudButton>
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
            </MudCard>
    
            <!-- Tabela de Gêneros -->
            <MudCard Class="mt-4">
                <MudCardContent>
                    <MudDataGrid T="GenderViewModel" 
                                 Items="@genders" 
                                 Loading="@loading"
                                 Hover="true"
                                 Striped="true"
                                 Dense="true">
                        <Columns>
                            <PropertyColumn Property="x => x.Name" Title="Nome" />
                            <PropertyColumn Property="x => x.Description" Title="Descrição" />
                            <PropertyColumn Property="x => x.CreatedAt" Title="Criado em" Format="dd/MM/yyyy HH:mm" />
                            <TemplateColumn Title="Ações" Sortable="false">
                                <CellTemplate Context="item">
                                    <MudButtonGroup Variant="Variant.Text" Size="Size.Small">
                                        <MudIconButton Icon="Icons.Material.Filled.Edit" 
                                                       Color="Color.Primary" 
                                                       Size="Size.Small"
                                                       OnClick="() => EditGender(item.Item.Id)" />
                                        <MudIconButton Icon="Icons.Material.Filled.Delete" 
                                                       Color="Color.Error" 
                                                       Size="Size.Small"
                                                       OnClick="() => DeleteGender(item.Item.Id)" />
                                    </MudButtonGroup>
                                </CellTemplate>
                            </TemplateColumn>
                        </Columns>
                        <PagerContent>
                            <MudDataGridPager T="GenderViewModel" />
                        </PagerContent>
                    </MudDataGrid>
                </MudCardContent>
            </MudCard>
        </MudContainer>

    </Authorized>
    <NotAuthorized>
        <MudText Typo="Typo.h3" GutterBottom="true">Você não tem permissão para acessar esta página.</MudText>
    </NotAuthorized>
</AuthorizeView>



@code {
    private SearchGenderQuery searchQuery = new();
    private List<GenderViewModel> genders = new();
    private bool loading = false;

    protected override async Task OnInitializedAsync()
    {
        await SearchGenders();
    }

    private async Task SearchGenders()
    {
        loading = true;
        try
        {
            var result = await Mediator.Send(searchQuery);
            genders = result.Data.ToList();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao carregar gêneros: {ex.Message}", Severity.Error);
        }
        finally
        {
            loading = false;
        }
    }

    private void ClearFilters()
    {
        searchQuery = new SearchGenderQuery();
        StateHasChanged();
    }

    private void CreateGender()
    {
        Navigation.NavigateTo("/genders/create");
    }

    private void EditGender(Guid id)
    {
        Navigation.NavigateTo($"/genders/edit/{id}");
    }

    private async Task DeleteGender(Guid id)
    {
        var parameters = new DialogParameters
        {
            ["ContentText"] = "Tem certeza que deseja excluir este gênero? Esta ação não pode ser desfeita.",
            ["ButtonText"] = "Excluir",
            ["Color"] = Color.Error
        };

        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Confirmar Exclusão", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                // TODO: Implementar comando de exclusão
                // await Mediator.Send(new DeleteGenderCommand(id));
                Snackbar.Add("Gênero excluído com sucesso!", Severity.Success);
                await SearchGenders();
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Erro ao excluir gênero: {ex.Message}", Severity.Error);
            }
        }
    }
}