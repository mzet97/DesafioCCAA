@page "/books/create"
@using MediatR
@using Microsoft.AspNetCore.Authorization
@using MudBlazor
@using SistemaLivro.Application.UseCases.Books.Commands
@using SistemaLivro.Application.UseCases.Genders.Queries
@using SistemaLivro.Application.UseCases.Publishers.Queries
@using SistemaLivro.Application.UseCases.Genders.ViewModels
@using SistemaLivro.Application.UseCases.Publishers.ViewModels
@inject IMediator Mediator
@inject ISnackbar Snackbar
@inject NavigationManager Navigation

@attribute [Authorize]

<PageTitle>Novo Livro</PageTitle>
<AuthorizeView> 
    <Authorized>
        <MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
            <MudText Typo="Typo.h4" Class="mb-4">Novo Livro</MudText>
    
            <MudCard>
                <MudCardContent>
                    <EditForm Model="@command" OnValidSubmit="@HandleValidSubmit" Context="editContext">
                        <DataAnnotationsValidator />
                
                        <MudGrid>
                            <MudItem xs="12" md="6">
                                <MudTextField @bind-Value="command.Title" 
                                              Label="Título" 
                                              Variant="Variant.Outlined" 
                                              Required="true"
                                              For="@(() => command.Title)" />
                            </MudItem>
                    
                            <MudItem xs="12" md="6">
                                <MudTextField @bind-Value="command.Author" 
                                              Label="Autor" 
                                              Variant="Variant.Outlined" 
                                              Required="true"
                                              For="@(() => command.Author)" />
                            </MudItem>
                    
                            <MudItem xs="12" md="6">
                                <MudTextField @bind-Value="command.ISBN" 
                                              Label="ISBN" 
                                              Variant="Variant.Outlined" 
                                              Required="true"
                                              For="@(() => command.ISBN)" />
                            </MudItem>
                    
                            <MudItem xs="12" md="6">
                                <MudSelect @bind-Value="command.GenderId" 
                                           Label="Gênero" 
                                           Variant="Variant.Outlined" 
                                           Required="true"
                                           For="@(() => command.GenderId)">
                                    @foreach (var gender in genders)
                                    {
                                        <MudSelectItem Value="@gender.Id">@gender.Name</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>
                    
                            <MudItem xs="12" md="6">
                                <MudSelect @bind-Value="command.PublisherId" 
                                           Label="Editora" 
                                           Variant="Variant.Outlined" 
                                           Required="true"
                                           For="@(() => command.PublisherId)">
                                    @foreach (var publisher in publishers)
                                    {
                                        <MudSelectItem Value="@publisher.Id">@publisher.Name</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>
                    
                            <MudItem xs="12">
                                <MudTextField @bind-Value="command.Synopsis" 
                                              Label="Sinopse" 
                                              Variant="Variant.Outlined" 
                                              Lines="4"
                                              For="@(() => command.Synopsis)" />
                            </MudItem>
                    
                            <MudItem xs="12">
                                <MudFileUpload T="IBrowserFile" 
                                               Accept=".jpg,.jpeg,.png,.gif"
                                               FilesChanged="OnCoverImageChanged"
                                               MaximumFileCount="1">
                                    <ButtonTemplate>
                                        <MudButton HtmlTag="label"
                                                   Variant="Variant.Filled"
                                                   Color="Color.Primary"
                                                   StartIcon="Icons.Material.Filled.CloudUpload"
                                                   for="@context">
                                            Selecionar Capa
                                        </MudButton>
                                    </ButtonTemplate>
                                </MudFileUpload>
                                @if (!string.IsNullOrEmpty(selectedFileName))
                                {
                                    <MudText Typo="Typo.body2" Class="mt-2">Arquivo selecionado: @selectedFileName</MudText>
                                }
                            </MudItem>
                        </MudGrid>
                
                        <MudCardActions Class="mt-4">
                            <MudButton Variant="Variant.Filled" 
                                       Color="Color.Primary" 
                                       ButtonType="ButtonType.Submit"
                                       Disabled="@loading"
                                       StartIcon="Icons.Material.Filled.Save">
                                @if (loading)
                                {
                                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                    <MudText Class="ms-2">Salvando...</MudText>
                                }
                                else
                                {
                                    <MudText>Salvar</MudText>
                                }
                            </MudButton>
                    
                            <MudButton Variant="Variant.Text" 
                                       Color="Color.Secondary" 
                                       OnClick="Cancel"
                                       StartIcon="Icons.Material.Filled.Cancel">
                                Cancelar
                            </MudButton>
                        </MudCardActions>
                    </EditForm>
                </MudCardContent>
            </MudCard>
        </MudContainer>

    </Authorized>
    <NotAuthorized>
        <MudText Typo="Typo.h3" GutterBottom="true">Você não tem permissão para acessar esta página.</MudText>
    </NotAuthorized>
</AuthorizeView>

@code {
    private CreateBookCommand command = new();
    private List<GenderViewModel> genders = new();
    private List<PublisherViewModel> publishers = new();
    private bool loading = false;
    private string selectedFileName = string.Empty;
    private IBrowserFile? selectedFile;

    protected override async Task OnInitializedAsync()
    {
        await LoadGenders();
        await LoadPublishers();
    }

    private async Task LoadGenders()
    {
        try
        {
            var query = new SearchGenderQuery();
            var result = await Mediator.Send(query);
            genders = result.Data.ToList();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao carregar gêneros: {ex.Message}", Severity.Error);
        }
    }

    private async Task LoadPublishers()
    {
        try
        {
            var query = new SearchPublisherQuery();
            var result = await Mediator.Send(query);
            publishers = result.Data.ToList();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao carregar editoras: {ex.Message}", Severity.Error);
        }
    }

    private void OnCoverImageChanged(IBrowserFile file)
    {
        selectedFile = file;
        selectedFileName = file.Name;
        StateHasChanged();
    }

    private async Task HandleValidSubmit()
    {
        loading = true;
        try
        {
            // TODO: Implementar upload da imagem se necessário
            // if (selectedFile != null)
            // {
            //     // Processar upload da imagem
            // }

            var result = await Mediator.Send(command);
            Snackbar.Add("Livro criado com sucesso!", Severity.Success);
            Navigation.NavigateTo("/books");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao criar livro: {ex.Message}", Severity.Error);
        }
        finally
        {
            loading = false;
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/books");
    }
}